/**
 * <p>
 * The main API package for Trap. This is the primary entry point for writing applications that use Trap. Most of the
 * entries herein are interfaces to objects that should be instantiated using the factory.
 * <p>
 * {@link com.ericsson.research.trap.TrapFactory} is the main factory class and is used to create new instances. To
 * create a client, use {@link com.ericsson.research.trap.TrapFactory#createClient(String, boolean)}. To create a server
 * (=listener), use {@link com.ericsson.research.trap.TrapFactory#createListener(String)}.
 * <p>
 * In some containers, automatic transport detection will not work. For them, before instantiating a server or client,
 * the available transports should be added using
 * {@link com.ericsson.research.trap.TrapTransports#addTransportClass(Class)}. This limitation is present everywhere
 * that packages cannot be scanned by reflection.
 * <h1>Version History</h1>
 * <h2>1.2.0</h2>
 * <ul>
 * <li><b>A major deadlock condition has been resolved</b>. When connecting more than 50 Trap transports during a
 * 15-second period, a potential deadlock could kill all current Trap sessions. Fixing this issue required a major
 * rework of Trap internals handling connection state.
 * <li>Up to 256 channels are now supported. Reduced memory usage when fewer channels are used.
 * <li>Connection (open) performance increased by up to 20%.
 * </ul>
 * <h3>Interface Changes</h3>
 * <ul>
 * <li>Introduced the {@link com.ericsson.research.trap.utils.Callback} interface that provides the caller the ability
 * to decide whether a call is synchronous or asynchronous. It is recommended that callers use asynchronous mode
 * whenever possible.
 * <li> {@link com.ericsson.research.trap.TrapEndpoint#isAlive(long)} has been changed to use a
 * {@link com.ericsson.research.trap.utils.Callback} return value instead of a synchronous method.
 * <li> {@link com.ericsson.research.trap.spi.TrapMessage} format has been rearranged to free up more bits in the
 * protocol.
 * <li>TrapIDs have been converted from long to String variables, and are now communicated during initial handshake. The
 * TrapID field in regular messages has been deprecated.
 * <li>New properties {@link com.ericsson.research.trap.TrapChannel#ID_MAX} and
 * {@link com.ericsson.research.trap.TrapChannel#ID_MIN} specify the allowable channel IDs. Note that ID_MIN represents
 * the control channel and should not be used. These properties will track future changes in maximum allowable channels
 * on Trap.
 * </ul>
 * <h3>Peer to Peer Support</h3> Trap now supports connections in mutually authenticated peer to peer manner. Trap will
 * manage the server/client roles to attempt to find a workable host/port combination.
 * <ul>
 * <li>This uses WebRTC as its inspiration for the connectivity. Trap will perform mutual authentication on both peers
 * before opening the connection.
 * <li>As of 1.2.0, the JavaScript implementation is not yet available.
 * <li>The {@link com.ericsson.research.trap.TrapPeer} interface extends TrapEndpoint by adding a new, out of band,
 * channel. To establish mutual authentication, Trap will use the out of band channel provided by the developer to
 * establish the connection.
 * <li> {@link com.ericsson.research.trap.spi.TrapTransportDelegate} objects now have an additional callback method to
 * note that they need data transported over to the other side for peer to peer identification.
 * </ul>
 * <h3>1.1.8</h3>
 * <ul>
 * <li>Changed JavaScript detection of WebSocket binary to use wss instead of ws, adding compatibility for secure sites.
 * </ul>
 * <h3>1.1.7</h3>
 * <ul>
 * <li>Fixed an error that would fail to properly connect WebSocket clients in Java when using ws:// or wss:// uris
 * instead of Trap configuration
 * <li>Removed some erroneous System.out calls.
 * </ul>
 * <h3>1.1.6</h3>
 * <ul>
 * <li>Fixed an issue where messages were not queued for flushing when a transport with queued messages disconnected.
 * <li>Fixed an issue where clients connecting in 7-bit mode to an invalid session ID would receive an 8-bit reply.
 * <li>Added Android classes to the fat jar.
 * <li>Added a trap-packages.txt generated by the indexing plugin to the fat jar, allowing package scanning on all
 * platforms as a fallback.
 * <li>Added trap-index-maven-plugin as a means for Maven projects to use the File-based Package Scanner. Add the
 * trap-index-maven-plugin to the project, execute it in generate-resources, and it will create a
 * <i>trap-packages.txt</i> resource. The package scanner will then use that information to statically locate available
 * classes for environments that do not support dynamic scanning.
 * </ul>
 * <h3>1.1.5</h3>
 * <ul>
 * <li>Added {@link com.ericsson.research.trap.TrapEndpoint#getTransportAuthenticationContexts()} as well as
 * corresponding {@link com.ericsson.research.trap.spi.TrapTransport#getAuthenticationContext()},
 * {@link com.ericsson.research.trap.spi.TrapTransport#getAuthenticationContext(java.util.Collection)} and
 * {@link com.ericsson.research.trap.spi.TrapTransport#getAuthenticationKeys()} to allow applications to access details
 * of the transport connections. This information is useful for, among other things, logging, UI and other elements, but
 * is not a replacement for {@link com.ericsson.research.trap.auth.TrapAuthentication}.
 * <li>Added new indexed Package Scanner, with improved documentation. See
 * {@link com.ericsson.research.trap.utils.PackageScanner} for an overview.
 * <li><b>Android:</b> Kitkat (4.4) broke the Android Package Scanner. Pending fix, proper package scanning will not
 * work again. Class index is included with trap-android.jar, but note that if package scanner is used for external
 * classes, a new index is required.
 * <li>Fixed exception when PackageScanner was unsuccessful in scanning a target class.
 * </ul>
 * <h3>1.1.4</h3>
 * <ul>
 * <li>Added TLS configuration, support and examples. See {@link com.ericsson.research.trap.examples.TLSEchoServer} and
 * accompanying files.
 * </ul>
 * <h3>1.1.3</h3>
 * <ul>
 * <li>"sleeping", "opening", "closing" events now properly dispatched in JS client.
 * </ul>
 * <h3>1.1.2</h3>
 * <ul>
 * <li>Fixed NullPointerException on {@link TrapListener#getClientConfiguration()}
 * <li>Added JSON support to JS client. New properties msg.object available, as well as sending the JSON objects. (Java
 * side has no JSON support at this time).
 * </ul>
 * <h3>1.1.1</h3>
 * <ul>
 * <li>Improved HTTP testing and performance.
 * </ul>
 * <h2>1.1</h2>
 * <ul>
 * <li><strong>Trap now requires Java 1.5 or later</strong><br />
 * <ul>
 * <li>The entire Trap API and Core have been moved to Java 1.5. This allows much higher performance default settings,
 * optimised loops, and better locking. No impact is expected, because Java 1.4. The interfaces have had generics added
 * to them, rendering most @suppressWarnings annotations unnecessary.</li>
 * </ul>
 * </li>
 * <li><strong>Overhauled</strong> the delegate interface. All delegate interfaces are now moved to a new delegates
 * package, and split up into component parts. New optional delegates have been added.</li>
 * <li><strong>Added</strong> transport priority resolution when adding a transport. <br />
 * <ul>
 * <li>A transport will be queried (canConnect and canListen) before being added. If both are false, discard.
 * Additionally, a new transport MUST have a lower priority than an old one to be added to the same name. E.g., built-in
 * http has prio 1100, then to override it as handler for &quot;http&quot;, the next discovered http transport must have
 * prio 1099 or lower. Note that these priorities are shared with the general priorities.</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> HttpServlet transport. Servlet 2.5 (synchronous) and 3.0 (asynchronous) are supported.</li>
 * <li><strong>Added</strong> Apache HTTP Client transport.</li>
 * <li><strong>Added</strong> support for <strong>multiplexing</strong> when running in 8-bit format mode.<br />
 * <ul>
 * <li>A single Trap Endpoint can use up to 64 channels (63 user channels and one system) to send data. Channels can
 * have different priority levels, bandwidth usage, and queueing strategy. Messages are chunked up into smaller pieces
 * and interleaved, allowing non-blocking transfer of smaller messages on higher priority channels.</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> support for <strong>compression</strong> when running 8-bit format mode.<br />
 * <ul>
 * <li>Messages can be individually compressed or sent uncompressed, allowing the application to strike a balance
 * between CPU and network load, depending on the availability of both and type of data.</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> new package for <strong>Android</strong>.<br />
 * <ul>
 * <li>This package provides everything needed for an android client. No longer are special hacks needed to get Trap on
 * Android working properly. Hooray!</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> the ability to &quot;host&quot; small files on Trap transports that support it (i.e.
 * HTTP). See the TrapHostingTransport interface.<br />
 * <ul>
 * <li>Especially for debug purposes, it's useful to have a small server. Since Trap will generally have at least one
 * HTTP interface, just putting up a TrapHostable can allow for quick debugging.</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> the ability to download Trap configuration as part of the setup.<br />
 * <ul>
 * <li>When creating a Trap client in Java, a URL such as <a href="http://sandbox.warpjs.net/Core-Gateway-View/trap.txt"
 * class="external-link" rel="nofollow">http://sandbox.warpjs.net/Core-Gateway-View/trap.txt</a> can be supplied instead
 * of a fixed configuration string. Trap will download the configuration from there.</li>
 * </ul>
 * </li>
 * <li><strong>Added</strong> JDKLoggerConfig class to use Java logging.<br />
 * <ul>
 * <li>When on a platform that supports Java logging, this is a quick way to get output adapted to the system console
 * (or Android console)</li>
 * </ul>
 * </li>
 * <li><strong>Experimental </strong>Node.JS support for servers and clients.</li>
 * <li>Fixed some issues for the HTTP transport that could cause race conditions or disconnects.</li>
 * <li>Resolved general race conditions that could cause an endpoint to fail.</li>
 * <li>Improved handling of acknowledgements and failed messages. Several conditions that could lose a message have been
 * resolved.</li>
 * <li>Improved keepalive logic. There's a much reduced probability of false positives now on a keepalive basis.</li>
 * <li>Streamlined maven repositories. Compilation using maven dependencies should now work better.</li>
 * <li>Optimised delivery of acknowledgement messages.</li>
 * <li>Optimised the sending thread to reduce the number of system calls.</li>
 * </ul>
 * 
 * @author Vladimir Katardjiev
 * @since 1.0
 */
package com.ericsson.research.trap;